// Autogenerated from Pigeon (v4.2.14), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "SignalrApi.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[ error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null] ];
  }
  return @[ result ?: [NSNull null]  ];
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface FLTConnectionOptions ()
+ (FLTConnectionOptions *)fromList:(NSArray *)list;
+ (nullable FLTConnectionOptions *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end
@interface FLTStatusChangeResult ()
+ (FLTStatusChangeResult *)fromList:(NSArray *)list;
+ (nullable FLTStatusChangeResult *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation FLTConnectionOptions
+ (instancetype)makeWithBaseUrl:(nullable NSString *)baseUrl
    hubName:(nullable NSString *)hubName
    queryString:(nullable NSString *)queryString
    hubMethods:(nullable NSArray<NSString *> *)hubMethods
    headers:(nullable NSDictionary<NSString *, NSString *> *)headers
    transport:(FLTTransport)transport
    connectionId:(nullable NSString *)connectionId {
  FLTConnectionOptions* pigeonResult = [[FLTConnectionOptions alloc] init];
  pigeonResult.baseUrl = baseUrl;
  pigeonResult.hubName = hubName;
  pigeonResult.queryString = queryString;
  pigeonResult.hubMethods = hubMethods;
  pigeonResult.headers = headers;
  pigeonResult.transport = transport;
  pigeonResult.connectionId = connectionId;
  return pigeonResult;
}
+ (FLTConnectionOptions *)fromList:(NSArray *)list {
  FLTConnectionOptions *pigeonResult = [[FLTConnectionOptions alloc] init];
  pigeonResult.baseUrl = GetNullableObjectAtIndex(list, 0);
  pigeonResult.hubName = GetNullableObjectAtIndex(list, 1);
  pigeonResult.queryString = GetNullableObjectAtIndex(list, 2);
  pigeonResult.hubMethods = GetNullableObjectAtIndex(list, 3);
  pigeonResult.headers = GetNullableObjectAtIndex(list, 4);
  pigeonResult.transport = [GetNullableObjectAtIndex(list, 5) integerValue];
  pigeonResult.connectionId = GetNullableObjectAtIndex(list, 6);
  return pigeonResult;
}
+ (nullable FLTConnectionOptions *)nullableFromList:(NSArray *)list { return (list) ? [FLTConnectionOptions fromList:list] : nil; }
- (NSArray *)toList {
  return @[
    (self.baseUrl ?: [NSNull null]),
    (self.hubName ?: [NSNull null]),
    (self.queryString ?: [NSNull null]),
    (self.hubMethods ?: [NSNull null]),
    (self.headers ?: [NSNull null]),
    @(self.transport),
    (self.connectionId ?: [NSNull null]),
  ];
}
@end

@implementation FLTStatusChangeResult
+ (instancetype)makeWithConnectionId:(nullable NSString *)connectionId
    status:(FLTConnectionStatus)status
    errorMessage:(nullable NSString *)errorMessage {
  FLTStatusChangeResult* pigeonResult = [[FLTStatusChangeResult alloc] init];
  pigeonResult.connectionId = connectionId;
  pigeonResult.status = status;
  pigeonResult.errorMessage = errorMessage;
  return pigeonResult;
}
+ (FLTStatusChangeResult *)fromList:(NSArray *)list {
  FLTStatusChangeResult *pigeonResult = [[FLTStatusChangeResult alloc] init];
  pigeonResult.connectionId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.status = [GetNullableObjectAtIndex(list, 1) integerValue];
  pigeonResult.errorMessage = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable FLTStatusChangeResult *)nullableFromList:(NSArray *)list { return (list) ? [FLTStatusChangeResult fromList:list] : nil; }
- (NSArray *)toList {
  return @[
    (self.connectionId ?: [NSNull null]),
    @(self.status),
    (self.errorMessage ?: [NSNull null]),
  ];
}
@end

@interface FLTSignalRHostApiCodecReader : FlutterStandardReader
@end
@implementation FLTSignalRHostApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FLTConnectionOptions fromList:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FLTSignalRHostApiCodecWriter : FlutterStandardWriter
@end
@implementation FLTSignalRHostApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FLTConnectionOptions class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FLTSignalRHostApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTSignalRHostApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTSignalRHostApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTSignalRHostApiCodecReader alloc] initWithData:data];
}
@end


NSObject<FlutterMessageCodec> *FLTSignalRHostApiGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FLTSignalRHostApiCodecReaderWriter *readerWriter = [[FLTSignalRHostApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void FLTSignalRHostApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FLTSignalRHostApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.SignalRHostApi.connect"
        binaryMessenger:binaryMessenger
        codec:FLTSignalRHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(connectConnectionOptions:completion:)], @"FLTSignalRHostApi api (%@) doesn't respond to @selector(connectConnectionOptions:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FLTConnectionOptions *arg_connectionOptions = GetNullableObjectAtIndex(args, 0);
        [api connectConnectionOptions:arg_connectionOptions completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.SignalRHostApi.reconnect"
        binaryMessenger:binaryMessenger
        codec:FLTSignalRHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reconnectConnectionId:completion:)], @"FLTSignalRHostApi api (%@) doesn't respond to @selector(reconnectConnectionId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_connectionId = GetNullableObjectAtIndex(args, 0);
        [api reconnectConnectionId:arg_connectionId completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.SignalRHostApi.stop"
        binaryMessenger:binaryMessenger
        codec:FLTSignalRHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(stopConnectionId:completion:)], @"FLTSignalRHostApi api (%@) doesn't respond to @selector(stopConnectionId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_connectionId = GetNullableObjectAtIndex(args, 0);
        [api stopConnectionId:arg_connectionId completion:^(FlutterError *_Nullable error) {
          callback(wrapResult(nil, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.SignalRHostApi.isConnected"
        binaryMessenger:binaryMessenger
        codec:FLTSignalRHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(isConnectedConnectionId:completion:)], @"FLTSignalRHostApi api (%@) doesn't respond to @selector(isConnectedConnectionId:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_connectionId = GetNullableObjectAtIndex(args, 0);
        [api isConnectedConnectionId:arg_connectionId completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.SignalRHostApi.invokeMethod"
        binaryMessenger:binaryMessenger
        codec:FLTSignalRHostApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(invokeMethodMethodName:arguments:completion:)], @"FLTSignalRHostApi api (%@) doesn't respond to @selector(invokeMethodMethodName:arguments:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_methodName = GetNullableObjectAtIndex(args, 0);
        NSArray<NSString *> *arg_arguments = GetNullableObjectAtIndex(args, 1);
        [api invokeMethodMethodName:arg_methodName arguments:arg_arguments completion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FLTSignalRPlatformApiCodecReader : FlutterStandardReader
@end
@implementation FLTSignalRPlatformApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FLTStatusChangeResult fromList:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FLTSignalRPlatformApiCodecWriter : FlutterStandardWriter
@end
@implementation FLTSignalRPlatformApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FLTStatusChangeResult class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FLTSignalRPlatformApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FLTSignalRPlatformApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FLTSignalRPlatformApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FLTSignalRPlatformApiCodecReader alloc] initWithData:data];
}
@end


NSObject<FlutterMessageCodec> *FLTSignalRPlatformApiGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    FLTSignalRPlatformApiCodecReaderWriter *readerWriter = [[FLTSignalRPlatformApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

@interface FLTSignalRPlatformApi ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation FLTSignalRPlatformApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)onStatusChangeStatusChangeResult:(FLTStatusChangeResult *)arg_statusChangeResult completion:(void(^)(NSError *_Nullable))completion {
  NSString *channelBuff = @"dev.flutter.pigeon.SignalRPlatformApi.onStatusChange.";
  NSString *connId = arg_statusChangeResult.connectionId ?: @"";
  NSString *channelReal = [channelBuff stringByAppendingString:connId];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:[NSString stringWithString:channelReal]
      binaryMessenger:self.binaryMessenger
      codec:FLTSignalRPlatformApiGetCodec()];
  [channel sendMessage:@[arg_statusChangeResult ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onNewMessageHubName:(NSString *)arg_hubName message:(NSString *)arg_message connectionId:(NSString *)arg_connectionId completion:(void(^)(NSError *_Nullable))completion {

  NSString *channelBuff = @"dev.flutter.pigeon.SignalRPlatformApi.onNewMessage.";
  NSString *connId = arg_connectionId ?: @"";
  NSString *channelReal = [channelBuff stringByAppendingString:connId];
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:[NSString stringWithString:channelReal]
      binaryMessenger:self.binaryMessenger
      codec:FLTSignalRPlatformApiGetCodec()];
  [channel sendMessage:@[arg_hubName ?: [NSNull null], arg_message ?: [NSNull null], arg_connectionId ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end
