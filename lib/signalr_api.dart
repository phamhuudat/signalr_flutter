// Autogenerated from Pigeon (v4.2.14), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

/// Transport method of the signalr connection.
enum Transport {
  auto,
  serverSentEvents,
  longPolling,
}

/// SignalR connection status
enum ConnectionStatus {
  connecting,
  connected,
  reconnecting,
  disconnected,
  connectionSlow,
  connectionError,
}

class ConnectionOptions {
  ConnectionOptions({
    this.baseUrl,
    this.hubName,
    this.queryString,
    this.hubMethods,
    this.headers,
    this.transport,
    this.connectionId,
  });

  String? baseUrl;

  String? hubName;

  String? queryString;

  List<String?>? hubMethods;

  Map<String?, String?>? headers;

  Transport? transport;

  String? connectionId;

  Object encode() {
    return <Object?>[
      baseUrl,
      hubName,
      queryString,
      hubMethods,
      headers,
      transport?.index,
      connectionId,
    ];
  }

  static ConnectionOptions decode(Object result) {
    result as List<Object?>;
    return ConnectionOptions(
      baseUrl: result[0] as String?,
      hubName: result[1] as String?,
      queryString: result[2] as String?,
      hubMethods: (result[3] as List<Object?>?)?.cast<String?>(),
      headers: (result[4] as Map<Object?, Object?>?)?.cast<String?, String?>(),
      transport: result[5] != null
          ? Transport.values[result[5]! as int]
          : null,
      connectionId: result[6] as String?,
    );
  }
}

class StatusChangeResult {
  StatusChangeResult({
    this.connectionId,
    this.status,
    this.errorMessage,
  });

  String? connectionId;

  ConnectionStatus? status;

  String? errorMessage;

  Object encode() {
    return <Object?>[
      connectionId,
      status?.index,
      errorMessage,
    ];
  }

  static StatusChangeResult decode(Object result) {
    result as List<Object?>;
    return StatusChangeResult(
      connectionId: result[0] as String?,
      status: result[1] != null
          ? ConnectionStatus.values[result[1]! as int]
          : null,
      errorMessage: result[2] as String?,
    );
  }
}

class _SignalRHostApiCodec extends StandardMessageCodec {
  const _SignalRHostApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is ConnectionOptions) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return ConnectionOptions.decode(readValue(buffer)!);
      
      default:

        return super.readValueOfType(type, buffer);
      
    }
  }
}

class SignalRHostApi {
  /// Constructor for [SignalRHostApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  SignalRHostApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _SignalRHostApiCodec();

  Future<String> connect(ConnectionOptions arg_connectionOptions) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.SignalRHostApi.connect', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_connectionOptions]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }

  Future<String> reconnect(String arg_connectionId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.SignalRHostApi.reconnect', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_connectionId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }

  Future<void> stop(String arg_connectionId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.SignalRHostApi.stop', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_connectionId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isConnected(String arg_connectionId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.SignalRHostApi.isConnected', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_connectionId]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as bool?)!;
    }
  }

  Future<String> invokeMethod(String arg_methodName, List<String?> arg_arguments) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.SignalRHostApi.invokeMethod', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_methodName, arg_arguments]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }
}

class _SignalRPlatformApiCodec extends StandardMessageCodec {
  const _SignalRPlatformApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is StatusChangeResult) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return StatusChangeResult.decode(readValue(buffer)!);
      
      default:

        return super.readValueOfType(type, buffer);
      
    }
  }
}

abstract class SignalRPlatformApi {
  static const MessageCodec<Object?> codec = _SignalRPlatformApiCodec();

  Future<void> onStatusChange(StatusChangeResult statusChangeResult);

  Future<void> onNewMessage(String hubName, String message, String connectionId);

  static void setup(SignalRPlatformApi? api, {BinaryMessenger? binaryMessenger,String? connectedId}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.SignalRPlatformApi.onStatusChange.$connectedId', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.SignalRPlatformApi.onStatusChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final StatusChangeResult? arg_statusChangeResult = (args[0] as StatusChangeResult?);
          assert(arg_statusChangeResult != null, 'Argument for dev.flutter.pigeon.SignalRPlatformApi.onStatusChange was null, expected non-null StatusChangeResult.');
          await api.onStatusChange(arg_statusChangeResult!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.SignalRPlatformApi.onNewMessage.$connectedId', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.SignalRPlatformApi.onNewMessage was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_hubName = (args[0] as String?);
          assert(arg_hubName != null, 'Argument for dev.flutter.pigeon.SignalRPlatformApi.onNewMessage was null, expected non-null String.');
          final String? arg_message = (args[1] as String?);
          assert(arg_message != null, 'Argument for dev.flutter.pigeon.SignalRPlatformApi.onNewMessage was null, expected non-null String.');
          final String? arg_connectionId = (args[2] as String?);
          assert(arg_connectionId != null, 'Argument for dev.flutter.pigeon.SignalRPlatformApi.onNewMessage was null, expected non-null String.');
          await api.onNewMessage(arg_hubName!, arg_message!, arg_connectionId!);
          return;
        });
      }
    }
  }
}
